name: Continuous integration

on:
  push:
    paths-ignore:
      - '**.md'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      CREATE_ARTIFACT: true #${{ startsWith(github.ref, 'refs/tags/') }}
      # The directory where the .NET build process will publish the executable.
      PUBLISH_DIR: publish
    outputs:
      build_version: ${{ steps.set_build_version.outputs.build_version }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Add build number to version string
        id: set_build_version
        shell: pwsh
        run: |
          $directoryProps = "Directory.Build.props" | Resolve-Path

          $xml = [xml](Get-Content $directoryProps)
          $xml.Project.PropertyGroup[0].VersionPrefix += ".${env:GITHUB_RUN_NUMBER}"

          Write-Host "Setting assembly version to $($xml.Project.PropertyGroup[0].VersionPrefix)"
          $xml.Save($directoryProps)

          # Write final version string to environment variable for job output.
          Write-Output "build_version=$($xml.Project.PropertyGroup[0].VersionPrefix)" >> $env:GITHUB_OUTPUT

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-build --verbosity normal --configuration Release

      - name: Create application artifact
        if: ${{ env.CREATE_ARTIFACT }}
        run: >
          dotnet publish
          --configuration Release
          --runtime win-x64
          --output ${{ env.PUBLISH_DIR }}
          --no-restore
          -property:PublishSingleFile=true
          -property:DebugType=None
          -property:DebugSymbols=false
          --self-contained false
          src/TeamsStatusPub/TeamsStatusPub.csproj

      - name: Upload artifact
        if: ${{ env.CREATE_ARTIFACT }}
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: ${{ env.PUBLISH_DIR }}/
          retention-days: 1

  installer:
    name: Create Installer
    needs: build
    #if: ${{ startsWith(github.ref, 'refs/tags/') }}
    # Have to use Windows for NSIS.
    runs-on: windows-latest
    env:
      INSTALLER_TOOL: ${env:ProgramFiles(x86)}/NSIS/makensis.exe
      BUILD_VERSION: ${{ needs.build.outputs.build_version }}
      # The directory where the build artifact from previous job will be
      # downloaded to.
      ARTIFACT_DIR: artifact
      # The directory where the installer will be built.
      SETUP_DIR: Output
    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4

      - name: Build installer
        shell: pwsh
        run: >
          & "${{ env.INSTALLER_TOOL }}"
          /DVERSION=${{ env.BUILD_VERSION }}
          /DPUBLISH_DIR=${{ env.ARTIFACT_DIR }}
          /DSETUP_DIR=${{ env.SETUP_DIR }}
          TeamsStatusPub.nsi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer
          path: ${{ env.SETUP_DIR }}/
          retention-days: 1

  release:
    name: Create Release
    needs: installer
    #if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    env:
      # Directory for the installer artifact.
      INSTALLER_DIR: installer
      RELEASE_NOTES_FILENAME: ReleaseNotes.md
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: installer

      - name: Show artifact directory contents
        shell: pwsh
        run: Get-ChildItem -Recurse

      # Use markdown to create base release notes file with hashes of all
      # downloadable files. This file will be used to create the GitHub
      # release notes.
      - name: Create release notes file
        shell: pwsh
        run: |
          $destFile = Join-Path -Path "${{ env.INSTALLER_DIR }}" -ChildPath "${{ env.RELEASE_NOTES_FILENAME }}"
          $checksums = Get-ChildItem -Path "${{ env.INSTALLER_DIR }}" -File
            | Sort-Object -Property Name
            | ForEach-Object { "| $($_.Name) | ``$((Get-FileHash $_.FullName -Algorithm SHA256).Hash)`` |" }
            | Out-String

          "| File | SHA256 |" | Out-File -FilePath $destFile
          "| ---- | ------ |" | Out-File -FilePath $destFile -Append
          $checksums | Out-File -FilePath $destFile -Append

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.INSTALLER_DIR }}/*.exe
          name: TeamsStatusPub ${{ github.ref_name }}
          body_path: ${{ env.INSTALLER_DIR }}/${{ env.RELEASE_NOTES_FILENAME }}

