name: Build and test solution

on:
  workflow_call:
    inputs:
      createArtifact:
        description: Whether or not to create the artifact
        required: true
        type: boolean
      artifactVersion:
        description: Version string to append to artifact file name
        required: true
        type: string

jobs:
  build:
    name: Windows Forms
    runs-on: windows-2019
    timeout-minutes: 10

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      # The directory where the .NET build process will publish the executable.
      PUBLISH_DIR: publish
      INSTALLER_TOOL: ${env:ProgramFiles(x86)}/NSIS/makensis.exe
      # The directory where the installer will be built.
      SETUP_DIR: Output
      # The value is a placeholder and will be set by a build step.
      BUILD_VERSION: 1.0.0
      RELEASE_NOTES_FILENAME: ReleaseNotes.md

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      # Existing version number isn't expected to have a revision number.
      # Expecting "x.y.z" string. This step will append ".build" to it.
      - name: Add build number to version string
        shell: pwsh
        run: |
          # Absolute path is required for saving changes later.
          $directoryProps = "Directory.Build.props" | Resolve-Path
          $xml = [xml](Get-Content $directoryProps)
          $xml.Project.PropertyGroup[0].VersionPrefix += ".${env:GITHUB_RUN_NUMBER}"
          Write-Host "Setting assembly version to $($xml.Project.PropertyGroup[0].VersionPrefix)"
          $xml.Save($directoryProps)
          Write-Output "BUILD_VERSION=$($xml.Project.PropertyGroup[0].VersionPrefix)" >> $env:GITHUB_ENV

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-build --verbosity normal --configuration Release

      - name: Create application artifact
        if: ${{ inputs.createArtifact }}
        run: >
          dotnet publish
          --configuration Release
          --runtime win-x64
          --output ${{ env.PUBLISH_DIR }}
          --no-restore
          -property:PublishSingleFile=true
          -property:DebugType=None
          -property:DebugSymbols=false
          --self-contained false
          src/TeamsStatusPub/TeamsStatusPub.csproj

      - name: Build installer
        if: ${{ inputs.createArtifact }}
        shell: pwsh
        run: >
          & "${{ env.INSTALLER_TOOL }}"
          /DVERSION=${{ env.BUILD_VERSION }}
          /DPUBLISH_DIR=${{ env.PUBLISH_DIR }}
          /DSETUP_DIR=${{ env.SETUP_DIR }}
          TeamsStatusPub.nsi

      # Use markdown to create base release notes file with hashes of all
      # downloadable files. This file will be used to create the GitHub
      # release notes.
      - name: Create release notes file
        if: ${{ inputs.createArtifact }}
        shell: pwsh
        run: |
          $destFile = Join-Path -Path "${{ env.SETUP_DIR }}" -ChildPath "${{ env.RELEASE_NOTES_FILENAME }}"
          $checksums = Get-ChildItem -Path "${{ env.SETUP_DIR }}" -File
            | Sort-Object -Property Name
            | ForEach-Object { "| $($_.Name) | ``$((Get-FileHash $_.FullName -Algorithm SHA256).Hash)`` |" }
            | Out-String

          "| File | SHA256 |" | Out-File -FilePath $destFile
          "| ---- | ------ |" | Out-File -FilePath $destFile -Append
          $checksums | Out-File -FilePath $destFile -Append

      - name: Upload artifact
        if: ${{ inputs.createArtifact }}
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: ${{ env.SETUP_DIR }}/
          retention-days: 1
